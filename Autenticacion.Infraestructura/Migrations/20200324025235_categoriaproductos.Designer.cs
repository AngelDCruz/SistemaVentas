// <auto-generated />
using System;
using Autenticacion.Infraestructura;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace SistemaVentas.Infraestructura.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200324025235_categoriaproductos")]
    partial class categoriaproductos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Autenticacion.Dominio.Entidades.DatosPersonalesEntidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApellidoMaterno")
                        .HasMaxLength(50);

                    b.Property<string>("ApellidoPaterno")
                        .HasMaxLength(50);

                    b.Property<string>("Calle")
                        .HasMaxLength(50);

                    b.Property<string>("Ciudad")
                        .HasMaxLength(50);

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50);

                    b.Property<string>("Pais")
                        .HasMaxLength(50);

                    b.Property<string>("Telefono")
                        .HasMaxLength(13);

                    b.Property<Guid>("UsuarioCreacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("UsuarioModificacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("Id");

                    b.ToTable("DatosPersonales");
                });

            modelBuilder.Entity("Autenticacion.Dominio.Entidades.RolesEntidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<Guid>("UsuarioCreacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("UsuarioModificacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Autenticacion.Dominio.Entidades.UsuariosEntidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("IntentosFallidos");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<string>("ImagenPerfil")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("PasswordHash")
                        .HasColumnName("Password");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("UserName")
                        .HasColumnName("Usuario")
                        .HasMaxLength(256);

                    b.Property<Guid>("UsuarioCreacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("UsuarioModificacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.EntidadesConfiguracion.TokenEntidad", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expiracion");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<string>("JwtId");

                    b.Property<bool>("Usado");

                    b.Property<Guid>("UserId");

                    b.Property<bool>("Valido");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("Token","Autenticacion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleReclamaciones");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UsuarioReclamaciones");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UsuariosRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("SistemaVentas.Dominio.Entidades.CategoriasEntidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Descripcion")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid>("UsuarioCreacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("UsuarioModificacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("SistemaVentas.Dominio.Entidades.ProductosEntidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CategoriaId");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("CHAR(10)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<string>("Imagen")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid>("UsuarioCreacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("UsuarioModificacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Autenticacion.Dominio.Entidades.RolesReclamacionesEntidad", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<Guid>("UsuarioCreacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("UsuarioModificacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("RolesReclamacionesEntidad");
                });

            modelBuilder.Entity("Autenticacion.Dominio.Entidades.UsuariosReclamacionesEntidad", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<Guid>("UsuarioCreacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("UsuarioModificacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasIndex("UserId");

                    b.ToTable("UsuariosReclamaciones");

                    b.HasDiscriminator().HasValue("UsuariosReclamacionesEntidad");
                });

            modelBuilder.Entity("Autenticacion.Dominio.Entidades.UsuariosRolesEntidad", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<Guid>("UsuarioCreacion");

                    b.Property<Guid>("UsuarioModificacion")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasIndex("RoleId");

                    b.ToTable("UsuariosRoles");

                    b.HasDiscriminator().HasValue("UsuariosRolesEntidad");
                });

            modelBuilder.Entity("Autenticacion.Infraestructura.EntidadesConfiguracion.TokenEntidad", b =>
                {
                    b.HasOne("Autenticacion.Dominio.Entidades.UsuariosEntidad", "Usuarios")
                        .WithMany("Token")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SistemaVentas.Dominio.Entidades.ProductosEntidad", b =>
                {
                    b.HasOne("SistemaVentas.Dominio.Entidades.CategoriasEntidad", "Categorias")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Autenticacion.Dominio.Entidades.RolesReclamacionesEntidad", b =>
                {
                    b.HasOne("Autenticacion.Dominio.Entidades.RolesEntidad", "Roles")
                        .WithMany("RoleReclamacion")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Autenticacion.Dominio.Entidades.UsuariosReclamacionesEntidad", b =>
                {
                    b.HasOne("Autenticacion.Dominio.Entidades.UsuariosEntidad", "Usuarios")
                        .WithMany("UsuariosReclamaciones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Autenticacion.Dominio.Entidades.UsuariosRolesEntidad", b =>
                {
                    b.HasOne("Autenticacion.Dominio.Entidades.RolesEntidad", "Roles")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Autenticacion.Dominio.Entidades.UsuariosEntidad", "Usuarios")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
